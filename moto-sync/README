INTRODUCTION

This is a VERY EXPERIMENTAL plugin for syncing with Motorola phones 
using the AT command set. It supports syncing phonebook and calendar 
entries. It will most likely mess up the data on your phone and any 
other members of the sync group. To prevent it writing any changes
to the phone, set WRITE_ENABLED to False (near the top of the file).

Also see KNOWN PROBLEMS below.


SUPPORTED HARDWARE

This plugin has been developed on a Motorola L7 ("SLVR").

It has also been (lightly) tested on the following models:
 * RAZR V3x (read only)
 * RAZR V3i (read only)
 * V635 (read only)

If your phone isn't listed above, please let me know if it works for
you, by emailing andrewb AT cse DOT unsw DOT edu DOT au.


REQUIREMENTS

 * OpenSync from svn HEAD with the python bindings and python-module plugin
 * Python 2.4
 * The python-dateutil library (at least version 1.1),
   from http://labix.org/python-dateutil


INSTALLATION

Copy motosync.py to $PREFIX/lib/opensync/python-plugins


CONFIGURATION

For now, the only configuration option to moto-sync is the device it 
should use to talk to the phone. This is specified in a small XML 
file, an example of which is included as moto-sync.conf.

Devices you're likely to use are:
 * /dev/rfcomm0 which is the first bluetooth channel. You need to setup 
   that channel to bind with your phone, by doing something like:
	rfcomm bind rfcomm0 00:11:22:33:44:55 1
 * /dev/ttyACM0 for a USB modem connection (or whatever other device the
   phone shows up on, see dmesg).

The only way I have tested or used the plugin so far is in a sync group 
with file-sync:
	msynctool --addgroup phone
	msynctool --addmember phone moto-sync
	msynctool --addmember phone file-sync
	msynctool --configure phone 1 # configure moto-sync, as above
	msynctool --configure phone 2 # configure file-sync, set the path
	msynctool --sync phone # cross your fingers!


TESTING/BACKUP

Before doing anything with write enabled, it is probably a good idea to
backup the data from your phone. You can use the mototest.py script to
do this, to delete entries on the phone, or to examine the data that
moto-sync would send to opensync. Run 'mototest.py --help' for details.


KNOWN PROBLEMS

A common problem happens early on when talking to a phone for the first 
time, some init strings get echoed multiple times and fail with an ERROR 
message. I'm not sure what causes this, but a workaround seems to be to 
open the phone device in minicom (use the -o flag to stop it sending 
init strings) and then immediately exit it again. I have now added some
code in the initialisation routine to attempt to fix this, so if you
have errors that go away after opening the device in minicom, let me know.

Unfortunately the functionality offered by the phone is very limited, it
basically comes down to (for the calendar, the phonebook is similar):
 * events are stored in memory "positions"
 * each event has a name, date/time, duration, alarm date/time, repeat type, 
   and list of exceptions
 * there are commands to list the events on the phone or write a new event in 
   a certain slot

Obviously there's no way to express or store the full vcal event data in 
the phone. The way opensync works at the moment, this means that if an 
event is synced to the phone, then modified in some way on the phone 
(eg. the duration is changed), all the data in the other members is 
replaced by the small amount of data that we can return from the phone.

What we really need is a way to "diff" the changes to the event, so we 
can detect that the duration field has been changed, and apply that 
"patch" to the full data in the other members of the sync. There are 
also other problems maintaining consistent UIDs for events.


TODO

 * Better error/exception handling (see all the FIXMEs in the code)
 * Do something with "mailing list" entries in the phonebook
 * Add support for reading/writing the SIM phonebook
 * Test with other hardware
 * Wrap osync_member_objtype_enabled, only report enabled objtypes
