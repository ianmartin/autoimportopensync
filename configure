#! /bin/sh

# waf configure wrapper
# with fallback to scons

# Fancy colors used to beautify the output a bit.
#
if [ $NOCOLOR ] ; then
    NORMAL=""
    BOLD=""
    RED=""
    YELLOW=""
    GREEN=""
else
    NORMAL="\033[0m"
    BOLD="\033[1m"
    RED="\033[91m"
    YELLOW="\033[01;93m"
    GREEN="\033[92m"
fi

EXIT_SUCCESS=0
EXIT_FAILURE=1
EXIT_ERROR=2
EXIT_BUG=10


CUR_DIR=$PWD

#possible relative path
WORKINGDIR=`dirname $0`
cd $WORKINGDIR
#abs path
WORKINGDIR=`pwd`
cd $CUR_DIR

# Checks for Python interpreter. Honours $PYTHON if set. Stores path to
# interpreter in $PYTHON.
#
checkPython()
{
	if [ -z "$PYTHON" ] ; then
	    PYTHON=`which python 2>/dev/null`
	fi
	printf "Checking for Python\t\t\t:  "
	if [ ! -x "$PYTHON" ] ; then
	  printf $RED"not found!"$NORMAL"\n"
	  echo "Please make sure that the Python interpreter is available in your PATH"
	  echo "or invoke configure using the PYTHON flag, e.g."
	  echo "$ PYTHON=/usr/local/bin/python configure"
	  exit $EXIT_FAILURE
	fi
	printf $GREEN"$PYTHON"$NORMAL"\n"
}

# Checks for WAF. Honours $WAF if set. Stores path to 'waf' in $WAF.
# Requires that $PYTHON is set.
#
checkWAF()
{
	printf "Checking for WAF\t\t\t:  "
	#installed miniwaf in sourcedir
	if [ -z "$WAF" ] ; then
	    if [ -f "${WORKINGDIR}/waf" ] ; then
		WAF="${WORKINGDIR}/waf"
		if [ ! -x $WAF ] ; then
		    chmod +x $WAF
		fi
	    fi
	fi

	if [ ! -x "$WAF" ] ; then
	    printf $RED"not found"$NORMAL"\n"
	    echo "Goto http://www.freehackers.org/~tnagy/bksys.html"
	    echo "and download a waf version"
	else
	  printf $GREEN"$WAF"$NORMAL"\n"
	fi
}

# Generates a Makefile. Requires that $WAF is set.
#
generateMakefile()
{
	cat > Makefile << EOF
#!/usr/bin/make -f

# Waf Makefile wrapper
# http://www.freehackers.org/~tnagy/waf.html
WAF_HOME=$CUR_DIR
all:
	@$WAF build

all_debug:
	@$WAF -v build

all_progress:
	@$WAF -p build

install:
	@$WAF install

uninstall:
	@$WAF uninstall

clean:
	@$WAF clean

distclean:
	@$WAF distclean
	@-rm -rf cache/
	@-rm -rf _build_
	@-rm -rf $CUR_DIR/.wafcache
	@-rm -f Makefile

check:
	@$WAF check

dist:
	@$WAF dist

EOF
}

# Checks for SCons. Honours $SCONS if set. Stores path to 'scons' in $SCONS.
# Requires that $PYTHON is set.
#
checkSCons()
{
	printf "Fallback checking for SCons\t\t\t:  "
	if [ -z $SCONS ]; then
	  SCONS=`which scons 2>/dev/null`
	fi
	if [ ! -x "$SCONS" ]; then
		printf $RED"not found"$NORMAL"\n"
		exit $EXIT_FAILURE
	else
		printf $GREEN"$SCONS"$NORMAL"\n"
	fi
	SCONS="$SCONS -Q"
}

# Generates a Makefile. Requires that $SCONS is set.
#
generateSconsMakefile()
{
	cat > Makefile << EOF
SCONS_DESTDIR += \$(DESTDIR)

all:
	@$SCONS

# it is also possible to use
# @$SCONS -j4

install:
	@(if test \$(SCONS_DESTDIR) ; then $SCONS DESTDIR=\$(SCONS_DESTDIR) install ; else $SCONS install ; fi)

clean:
	@$SCONS -c

uninstall:
	@$SCONS -c install

dist:
	@$SCONS dist

distclean:
	@$SCONS -c
	-@rm -rf .sconf_temp
	-@rm -rf cache/
	-@rm -f config.log
	-@rm -f .sconsign.dblite
	-@rm -f libopensync.conf
	-@rm Makefile
EOF
}

checkPython
checkWAF

if [ -x "$WAF" ] ; then
	echo "calling waf configure with parameters"
	export WAF_HOME=$CUR_DIR
	$WAF configure $* || exit $EXIT_ERROR
	#create a Makefile if waf configure succeeds
	if [ -f "${WORKINGDIR}/.lock-wscript" ] ; then
		if [ -f "Makefile" ] ; then
			echo ""
    		else
        		generateMakefile
		fi
	fi
else
	checkSCons
	if [[ "$1" == "--help" ]]; then
		$SCONS --help
		exit $EXIT_SUCCESS
	fi
	echo "calling scons configure with parameters"
	$SCONS configure ${@//--/} || exit $EXIT_ERROR
	generateSconsMakefile
fi

exit $EXIT_SUCCESS
